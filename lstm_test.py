# -*- coding: utf-8 -*-
"""LSTM-Test.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1r-UTuwEQ2i8MokZusryAN4l3wn2Tbk-n
"""

import numpy as np
import pandas as pd
import tensorflow as tf
from tensorflow import keras
import sys
from google.colab import drive
import matplotlib.pyplot as plt
from sklearn.metrics import mean_squared_error
from math import sqrt
from numpy.random import seed
from keras import backend as K
import math

seed(1)
tf.random.set_seed(2)

# Load the file
drive.mount('/content/drive')
sys.path.append('/content/drive/My Drive/Colab Notebooks')

df = pd.read_parquet('/content/drive/My Drive/Colab Notebooks/FeaturesMonthlyEdu_False_US_Small_fa9480d4d7-data.parquet')
df.shape[0]

# Create time series for each fund
funds = df['fund_id'].unique()
dates = df['report_date'].unique()

# Create time series for each fund
df_1 = pd.DataFrame()
output_temp_1 = pd.DataFrame(columns=('fund_id', 'report_date', 'roe', 'roa', 
                                      'oper_mgn', 'pay_out_ratio', 'pe', 'pbps', 
                                      'div_yld'))
for fund in funds:
  temp = df[df['fund_id'] == fund]
  output_temp = pd.DataFrame(columns=('fund_id', 'report_date', 'roe', 'roa', 'oper_mgn', 
                                      'pay_out_ratio', 'pe', 'pbps', 'div_yld'))
  for i in range(len(dates)):
    temp_1 = temp.loc[(temp['report_date'] == dates[i]) & (temp['is_holding'] == 1)]
    row = {'fund_id':fund, 'report_date':dates[i], 'roe':temp_1['roe'].median(), 'roa':temp_1['roa'].median(), 
                'oper_mgn':temp_1['oper_mgn'].median(), 'pay_out_ratio':temp_1['pay_out_ratio'].median(), 
                'pe':temp_1['pe'].median(), 'pbps':temp_1['pbps'].median(), 'div_yld':temp_1['div_yld'].median()}
    output_temp.loc[i] = row
  df_1 = df_1.append(output_temp)

df_1

# Save all features in a list
features = ['roe', 'roa', 'oper_mgn', 'pay_out_ratio', 'pe', 'pbps', 'div_yld']

# Iterate through all funds to generate the result with predicted values of features
output = pd.DataFrame(columns=('fund_id', 'roe', 'roa', 'oper_mgn', 'pay_out_ratio', 'pe', 'pbps', 'div_yld'))
for j in range(len(funds)):
  # Train the model for each fund
  temp = df_1[df_1['fund_id']==funds[j]]
  prediction = []
  temp = temp.drop(['fund_id','report_date'], axis=1)
  for i in features:
    #temp = temp.drop(['fund_id','report_date'], axis=1)
    col = temp[i]

    # Convert to supervised dataset
    temp_1 = temp.shift(axis=0, periods=1)
    # temp = temp.rename(columns={'roe':'roe(t-1)', 'roa':'roa(t-1)', 'oper_mgn':'oper_mgn(t-1)', 'pay_out_ratio':'pay_out_ratio(t-1)', 
    #                             'pe':'pe(t-1)', 'pbps':'pbps(t-1)', 'div_yld':'div_yld(t-1)'})
    temp_1 = temp_1.dropna()
    temp_1['prediction'] = col

    # Split to train and test set
    values = temp_1.values
    n_train_months = math.ceil(0.75*values.shape[0])
    train = values[:n_train_months, :]
    test = values[n_train_months:, :]

    # Split into input and output
    train_X, train_y = train[:, :-1], train[:, -1]
    test_X, test_y = test[:, :-1], test[:, -1]

    # Reshape input to be 3D [sample, timesteps, features]
    train_X = train_X.reshape((train_X.shape[0], 1, train_X.shape[1]))
    test_X = test_X.reshape((test_X.shape[0], 1, test_X.shape[1]))

    # Create and fit the LSTM network
    model = tf.keras.Sequential()
    # model.add(tf.keras.layers.LSTM(5, input_shape=(train_X.shape[1], train_X.shape[2]), activation='relu'))
    model.add(tf.keras.layers.LSTM(5, input_shape=(train_X.shape[1], train_X.shape[2])))
    model.add(tf.keras.layers.Dropout(0.2))
    model.add(tf.keras.layers.Dense(1, activation='sigmoid'))
    model.compile(loss='mae', optimizer='adam')
    ####
    train_X = K.cast_to_floatx(train_X)
    train_y = K.cast_to_floatx(train_y)
    test_X = K.cast_to_floatx(test_X)
    test_y = K.cast_to_floatx(test_y)
    ####
    history = model.fit(train_X, train_y, epochs=50, batch_size=20, validation_data=(test_X, test_y), verbose=0, shuffle=False)

    # Predict with latest data
    input_fund = df_1[df_1['fund_id']==funds[j]]
    input_data = input_fund.iloc[-1:,:]
    input_data = input_data.drop(['fund_id', 'report_date'], axis=1)
    values = input_data.values
    input = values
    input = input.reshape((1, 1, input.shape[1]))
    input = K.cast_to_floatx(input)
    feature_prediction = model.predict(input)

    # Save the predicted value
    prediction.append(feature_prediction)

    # Delete the model
    keras.backend.clear_session()

  row = {'fund_id':funds[j], 'roe':prediction[0], 'roa':prediction[1], 
         'oper_mgn':prediction[2], 'pay_out_ratio':prediction[3], 
         'pe':prediction[4], 'pbps':prediction[5], 'div_yld':prediction[6]}
  output.loc[j] = row

"""CPU: 33 min 24 s
GPU: 27 min 17 s
"""

output



# output.to_excel('output_CPU.xls')

# !cp output_CPU.xls '/content/drive/My Drive/Colab Notebooks'

output_1 = output

# Generate all stocks
stocks = df[df['report_date']==dates[-1]]
stocks = stocks.drop(['fund_id', 'is_holding', 'report_date', 'fsym_id'], axis=1)
stocks = stocks.drop_duplicates('fsym_regional_id')
stocks.head()

output_1.set_index(['fund_id'], inplace=True)
output_1 = pd.DataFrame(output_1, dtype=np.float)
output_1 = output_1.dropna(how='any')
output_1

# Screen recommended enter stocks
stocks = df['fsym_id'].unique()
for stock in stocks: